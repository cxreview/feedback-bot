from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram.methods.send_message import SendMessage
from pymongo.errors import DuplicateKeyError
from aiogram.fsm.context import FSMContext

from config import mongo, check_user
from .states import AdminInputStates

router = Router()

@router.callback_query(lambda c: c.data.startswith("publish_"))
async def publish(callback: CallbackQuery):
    text = callback.message.text + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
    await callback.message.edit_text(text=text, reply_markup=None)
    command, user_id = callback.data.split("_")
    await SendMessage(
        chat_id=user_id,
        text="üéâ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–¥–æ–±—Ä–µ–Ω–æ! –ü–æ—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤"
    )
    await callback.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ")


@router.callback_query(lambda c: c.data.startswith("ban_"))
async def ban(callback: CallbackQuery):
    command, user_id = callback.data.split("_")
    try:
        await mongo.banned.insert_one({
            '_id': int(user_id)
        })
    except DuplicateKeyError:
        return await callback.answer("‚ùå –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")


@router.callback_query(lambda c: c.data.startswith("answer_"))
async def answer(callback: CallbackQuery, state: FSMContext):
    command, user_id = callback.data.split("_")
    await state.set_data({'user': int(user_id)})
    await state.set_state(AdminInputStates.answer)
    await callback.answer("ü§î –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å")


@router.message(AdminInputStates.answer)
async def send_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    if await check_user(data['user']):
        return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    try:
        await SendMessage(
            chat_id=data['user'],
            text="–ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ –ø–æ –í–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É:\n\n" + message.text
        )
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
